#include <bits/stdc++.h>
 
using namespace std;
 
 
const long long INF = 100000000000;
const long long large_prime = 1000000007;
using ll = long long;
using ld = long double;
 
#define PI 3.14
#define ff first
#define ss second
#define pb push_back
#define initialize(a,b) memset(a,b,sizeof(a))
#define endl "\n"
#define all(v) (v).begin(),(v).end()
 
 
const int N = 100000;
int parent [N];
int size_arr [N];
 
bool is_persq(ll a){
    if(floor(sqrt(a))==ceil(sqrt(a))){return 1;}
    else{return 0;}
    }
bool is_int(double a){
    if(floor((a))==ceil(a)){return 1;}
    else{return 0;}
    }    
int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);}
void make_set(int v) {
    parent[v] = v;
    size_arr[v] = 1;}
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (size_arr[a] < size_arr[b])
            swap(a, b);
        parent[b] = a;
        size_arr[a] += size_arr[b];
    }}
long long int power(ll a, ll b){
    ll temp;
    if(b==0){return 1;}
    temp = power(a,b/2)%large_prime; 
    if(b%2==0){return (temp*temp)%large_prime;}
    else {return (((a*temp)%large_prime)*temp)%large_prime;}}
void fastIO(){ 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);} 
bool sortbysecdesc(const pair<ll,ll> &a, const pair<ll,ll> &b) {
       if(a.first==b.first)
            return a.second<b.second;
       return a.first > b.first;}
vector<ll> sieve(ll n) {ll*arr = new ll[n + 1](); vector<ll> vect; for (ll i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (ll j = (ll(i) * ll(i)); j <= n; j += i)arr[j] = 1;} return vect;}
 
 
 
int main(){ 
int n,m;
cin>>n>>m;
 
int arr[n];
 
for(int i=0;i<n;i++){cin>>arr[i];}
 
int dp[n+1][m+2]={};
 
for(int i=1;i<=n;i++){
 
    for(int j=1;j<=m;j++){
 
        if(i==1 && (arr[i-1]==0||arr[i-1]==j)){
 
           dp[i][j]=1;
 
 
        }
 
        else if(arr[i-1]==0 || arr[i-1]==j){
 
                dp[i][j] = ((dp[i-1][j] + dp[i-1][j-1])%large_prime+ dp[i-1][j+1])%large_prime;
 
        }
 
        
 
    }
}
 
ll ans =0;
for(int i=0;i<=m;i++){ans+=dp[n][i]%large_prime;}
 
 
cout<<ans%large_prime<<endl;
 
 
 
 
    
   
}
 
