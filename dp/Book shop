#include <bits/stdc++.h>
//#include <boost/multiprecision/cpp_int.hpp>
 
using namespace std;
//using namespace boost::multiprecision;
const long long INF = 100000000000;
const long long large_prime = 1000000007;
using ll = long long;
using ld = long double;
#define PI 3.14
//bool ispowerof2 ( cpp_int num ){
    //if ( ( num & ( num - 1 ) ) == 0 )
   //     return 1; 
  //  return 0;}
 
bool is_persq(ll a){
    if(floor(sqrt(a))==ceil(sqrt(a))){return 1;}
    else{return 0;}
    }
bool is_int(double a){
    if(floor((a))==ceil(a)){return 1;}
    else{return 0;}
    }    
long long int power(ll a, ll b){
    ll temp;
    if(b==0){return 1;}
    temp = power(a,b/2)%large_prime; 
    if(b%2==0){return (temp*temp)%large_prime;}
    else {return (((a*temp)%large_prime)*temp)%large_prime;}}
void fastIO(){ 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);} 
bool sortbysecdesc(const pair<ll,ll> &a, const pair<ll,ll> &b) {
       if(a.first==b.first)
            return a.second<b.second;
       return a.first > b.first;}
vector<ll> sieve(ll n) {ll*arr = new ll[n + 1](); vector<ll> vect; for (ll i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (ll j = (ll(i) * ll(i)); j <= n; j += i)arr[j] = 1;} return vect;}
 
 
 
 
int dp[1000+1][100000+1];
 
int main(){ 
 
fastIO();
 
int n, x;
cin>>n>>x;
int val[n];
int page[n];
 
for( int i=0;i<n;i++){
    cin>>val[i];
}
 
for( int i=0;i<n;i++){
    cin>>page[i];
}
 
for( int i=0;i<=n;i++){
    for( int j=0;j<=x;j++){
 
            if(i==0 || j==0){dp[i][j]=0;}
 
 
    else if(val[i-1]<=j){
 
                        dp[i][j] = max (  page[i-1] + dp[i-1][j-val[i-1]] , dp[i-1][j] )  ;    
 
                    }
 
    else if(val[i-1]>j) {dp[i][j] = dp[i-1][j];}
 
}
 
}
cout<<dp[n][x]<<endl;     
 
 
 
 
 
 
 
 
 
 
 }
