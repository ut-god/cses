#include <bits/stdc++.h>
//#include <boost/multiprecision/cpp_int.hpp>
 
using namespace std;
//using namespace boost::multiprecision;
const long long INF = 100000000000;
const long long large_prime = 1000000007;
using ll = long long;
using ld = long double;
#define PI 3.14
//bool ispowerof2 ( cpp_int num ){
    //if ( ( num & ( num - 1 ) ) == 0 )
   //     return 1;
  //  return 0;}
 
bool is_persq(ll a){
    if(floor(sqrt(a))==ceil(sqrt(a))){return 1;}
    else{return 0;}
    }
bool is_int(double a){
    if(floor((a))==ceil(a)){return 1;}
    else{return 0;}
    }    
 
long long int power(ll a, ll b){
    ll temp;
    if(b==0){return 1;}
    temp = power(a,b/2)%large_prime; 
    if(b%2==0){return (temp*temp)%large_prime;}
    else {return (((a*temp)%large_prime)*temp)%large_prime;}}
 
 
void fastIO(){ 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);} 
bool sortbysecdesc(const pair<ll,ll> &a, const pair<ll,ll> &b) {
       if(a.first==b.first)
            return a.second<b.second;
       return a.first > b.first;}
 
 
vector<int> sieve(int n) {int*arr = new int[n + 1](); vector<int> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (ll j = (ll(i) * ll(i)); j <= n; j += i)arr[j] = 1;} return vect;}
 
 
int main(){ 
 
fastIO();
 
int n;
 
cin>>n;
 
int arr[n+1]={};
arr[0]=1;
for( int i=1;i<10;i++){
    arr[i]=1;
}
 
for( int i=10;i<n+1;i++){
    string y = to_string(i);
 
        for( char c : y){
        int digit= int(c)-48;
            if(digit==0)continue;
            if (arr[i]!=0 ){arr[i]= min (arr[i-digit]+1,arr[i]);}
                else {arr[i]=arr[i-digit]+1;}
 
                        }
 
 
                        }   
 
 
cout<<arr[n];
 
}
 
