#include <bits/stdc++.h>
 
using namespace std;
 
const long long INF = 100000000000;
const long long large_prime = 1000000007;
using ll = long long;
using ld = long double;
 
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define endl "\n"
#define all(v) (v).begin(),(v).end()
#define set_bits __builtin_popcountll
 
 
 
#ifndef ONLINE_JUDGE
#define dbg(a) cerr << endl; cerr << #a << ": "; _print(a); cerr << endl << endl;
#else
#define dbg(a)
#endif
void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.fs); cerr << ","; _print(p.sn); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(unordered_map <T, V> umap) {cerr << "{ "; for(auto i : umap) {cerr << "{";_print(i.fs); cerr << ", "; _print(i.sn); cerr << "} ";} cerr << "}";}
 
 
 
bool is_persq(ll a){
    if(floor(sqrt(a))==ceil(sqrt(a))){return 1;}
    else{return 0;}
    }
bool is_int(double a){
    if(floor((a))==ceil(a)){return 1;}
    else{return 0;}
    }    
long long int power(ll a, ll b){
    ll temp;
    if(b==0){return 1;}
    temp = power(a,b/2)%large_prime; 
    if(b%2==0){return (temp*temp)%large_prime;}
    else {return (((a*temp)%large_prime)*temp)%large_prime;}}
void fastIO(){ 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);} 
bool sortbysecdesc(const pair<ll,ll> &a, const pair<ll,ll> &b) {
       if(a.first==b.first)
            return a.second<b.second;
       return a.first > b.first;}
vector<ll> sieve(ll n) {ll*arr = new ll[n + 1](); vector<ll> vect; for (ll i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (ll j = (ll(i) * ll(i)); j <= n; j += i)arr[j] = 1;} return vect;}
 
 
int LIS(vector<int> &a)
{
    vector<int> lis; lis.reserve(a.size());
    for(auto &x: a)
    {
        auto it = upper_bound(lis.begin(), lis.end(), x);  // upper_bound for non-decreasing
        if(it == lis.end())
            lis.push_back(x);
        else
            *it = x;
    }
    return lis.size();    
}
 
 int powerof2(ll x){
   
    return log2(__gcd(x, (ll)pow(2LL,62LL)));
    
    
    
 }
bool ispalindrome(string s){
    int n = s.size();
    bool flag = true;
    for(int i=0;i<n/2;i++){
        if(s[i]!=s[n-i-1])flag=false;
    }
    
    return flag;
}
 
int r,c;
 
 
bool vis[1001][1001];
 
char graph[1000+1][1000+1];
 
bool isvalid(int x , int y){
    
    if(x>=0 && x<r && y>=0 && y<c && graph[x][y]=='.')return 1;
    return 0;
}
 
 
void dfs(int x , int y){
    
    vis[x][y]=1;
 
    
    pair<int,int> movements[4]={{1,0},{-1,0} ,{0,1},{0,-1} };
    
    for(auto p :movements){
            int xx = x + p.ff;
            int yy = y+ p.ss;
        
        if(isvalid(xx, yy) && !vis[xx][yy]){
            dfs(xx,yy);
        }
        
        
    }
    
    
    
    
    
}
 
 
 
 
 
 
 
 
int main(){ 
 
fastIO();
int cc=0;
 
cin>>r>>c;
 
for(int i=0;i<r;i++){
    for(int j=0;j<c;j++){
        cin>>graph[i][j];
    }
}
//dfs(0,3);
 
 
for(int i=0;i<r;i++){
    for(int j=0;j<c;j++){
       // cout<<vis[i][j];
        if(!vis[i][j] && graph[i][j]=='.'){
            dfs(i,j);cc++;
       }
        
    }
 // cout<<endl;
}
 
cout<<cc<<endl;
         
        
}
   
    
 
 
 
 
